package com.ui;

import com.dao.CustomersDAO;
import com.dao.OrdersDAO;
import com.dao.ProductsDAO;
import com.dao.UserDAO;
import com.model.Customer;
import com.model.Order;
import com.model.Product;
import com.model.User;
import com.ui.tablemodel.*;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class TableFrame<T> extends BaseFrame {
  private JPanel tablePanel;
  private JTable mainTable;
  private JButton deleteButton;
  private JButton updateButton;
  private JButton searchButton;
  private JButton createButton;
  private JButton backButton;
  private JTextField queryField;
  private JLabel descriptionLabel;

  private TableModel<T> content;

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  public TableFrame (AppState state, TableModel<T> content) {
    super();
    setContentPane(tablePanel);// don't forget this, the window will be empty
    setExtendedState(JFrame.MAXIMIZED_BOTH);
    setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    setMinimumSize(new Dimension(800, 600));

    Font currentFont = descriptionLabel.getFont();
    descriptionLabel.setFont(new Font(currentFont.getName(), currentFont.getStyle(), 20));
    descriptionLabel.setText("This is the available " + state.selectedTableType);
    getRootPane().setDefaultButton(searchButton);
    this.content = content;

    mainTable.setModel(content);

    //Back button
    backButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        state.resetSelectedTableType();
        dispose();
      }
    });

    // delete button
    deleteButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        // get the selected row
        int selectedRow = mainTable.getSelectedRow();
        //check if there is selection
        if (selectedRow != -1) {
          T selectedItem = (T) content.getItem(selectedRow);
          //throw confirm message
          int confirm = JOptionPane.showConfirmDialog(
                  TableFrame.this,
                  "Are you sure you want to delete this row?",
                  "Confirm Delete",
                  JOptionPane.YES_NO_OPTION
                                                     );
          if (confirm == JOptionPane.YES_OPTION) {
            try {
              if (state.selectedTableType.equals(AppState.TableTypes.Users.name())) {
                UserDAO.deleteItem(selectedItem);
                content.refreshTable();
              }
              if (state.selectedTableType.equals(AppState.TableTypes.Customers.name())) {
                CustomersDAO.deleteItem(selectedItem);
                content.refreshTable();
              }
              if (state.selectedTableType.equals(AppState.TableTypes.Products.name())) {
                ProductsDAO.deleteItem(selectedItem);
                content.refreshTable();
              }
              if (state.selectedTableType.equals(AppState.TableTypes.Orders.name())) {
                Order selectedOrder = (Order) selectedItem;
                OrdersDAO.deleteItem(selectedOrder.getOrderId());
                content.refreshTable();
              }
            } catch (SQLException ex) {
              throw new RuntimeException(ex);
            }
          }
        } else {
          JOptionPane.showMessageDialog(TableFrame.this, "Please select a row to delete.");
        }
      }
    });

    //Edit
    updateButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        // get the selected row
        int selectedRow = mainTable.getSelectedRow();
        if (selectedRow != -1) {
          T selectedItem = (T) content.getItem(selectedRow);

          //edit a user
          if (state.selectedTableType.equals(AppState.TableTypes.Users.name())) {
            new UserFrame(content, selectedItem);
          }

          //edit customer
          if (state.selectedTableType.equals(AppState.TableTypes.Customers.name())) {
            new CustomerFrame(content, selectedItem);
          }

          //Edit order
          if (state.selectedTableType.equals(AppState.TableTypes.Orders.name())) {
            Order selectedOrder = (Order) content.getItem(selectedRow);
            ArrayList<Product> availableProducts;
            ArrayList<Customer> availableCustomers;

            try {
              availableCustomers = CustomersDAO.getData();
              availableProducts = ProductsDAO.getData();
              new OrderFrame(selectedOrder, availableCustomers, availableProducts, state);
              dispose();
            } catch (SQLException ex) {
              JOptionPane.showMessageDialog(
                      null,
                      "Database error occurred: " + ex.getMessage(),
                      "Error",
                      JOptionPane.ERROR_MESSAGE);
            }
          }

          //edit a product
          if (state.selectedTableType.equals(AppState.TableTypes.Products.name())) {
            new ProductFrame(content, selectedItem);
          }
        } else {
          JOptionPane.showMessageDialog(TableFrame.this, "Please select a row to delete.");
        }
      }
    });

    //Create
    createButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {

        if (state.selectedTableType.equals(AppState.TableTypes.Users.name())) {
          new UserFrame(content);
        }
        if (state.selectedTableType.equals(AppState.TableTypes.Customers.name())) {
          new CustomerFrame(content);
        }
        //Orders
        if (state.selectedTableType.equals(AppState.TableTypes.Orders.name())) {
          ArrayList<Customer> availableCustomers;
          ArrayList<Product> availableProducts;
          try {
            availableCustomers = CustomersDAO.getData();
            availableProducts = ProductsDAO.getData();
            new OrderFrame(availableCustomers, availableProducts, state);
            dispose();
          } catch (SQLException ex) {
            throw new RuntimeException(ex);
          }
        }
        if (state.selectedTableType.equals(AppState.TableTypes.Products.name())) {
          new ProductFrame(content);
        }
      }
    });

    //search
    searchButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        String query = queryField.getText();

        if (state.selectedTableType.equals(AppState.TableTypes.Users.name())) {
          List<User> newList = (List<User>) content.search(query);
          UserTableModel newContent = new UserTableModel(newList);
          mainTable.setModel(newContent);
        }
        if (state.selectedTableType.equals(AppState.TableTypes.Customers.name())) {
          List<Customer> newList = (List<Customer>) content.search(query);
          CustomerTableModel newContent = new CustomerTableModel(newList);
          mainTable.setModel(newContent);
        }
        if (state.selectedTableType.equals(AppState.TableTypes.Orders.name())) {
          List<Order> newList = (List<Order>) content.search(query);
          OrderTableModel newContent = new OrderTableModel(newList);
          mainTable.setModel(newContent);
        }
        if (state.selectedTableType.equals(AppState.TableTypes.Products.name())) {
          List<Product> newList = (List<Product>) content.search(query);
          ProductTableModel newContent = new ProductTableModel(newList);
          mainTable.setModel(newContent);
        }
      }
    });
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$ () {
    tablePanel = new JPanel();
    tablePanel.setLayout(new GridBagLayout());
    tablePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
    searchButton = new JButton();
    searchButton.setText("Search");
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.NORTH;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    tablePanel.add(searchButton, gbc);
    descriptionLabel = new JLabel();
    descriptionLabel.setText("Available customers");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.anchor = GridBagConstraints.NORTH;
    tablePanel.add(descriptionLabel, gbc);
    updateButton = new JButton();
    updateButton.setMargin(new Insets(8, 8, 8, 8));
    updateButton.setText("Update");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.anchor = GridBagConstraints.WEST;
    tablePanel.add(updateButton, gbc);
    deleteButton = new JButton();
    deleteButton.setMargin(new Insets(8, 8, 8, 8));
    deleteButton.setText("Delete");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.anchor = GridBagConstraints.WEST;
    tablePanel.add(deleteButton, gbc);
    createButton = new JButton();
    createButton.setMargin(new Insets(8, 8, 8, 8));
    createButton.setText("Create");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 4;
    gbc.anchor = GridBagConstraints.WEST;
    tablePanel.add(createButton, gbc);
    backButton = new JButton();
    backButton.setMargin(new Insets(8, 8, 8, 8));
    backButton.setText("Back");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 6;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    tablePanel.add(backButton, gbc);
    final JScrollPane scrollPane1 = new JScrollPane();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 2;
    gbc.gridwidth = 2;
    gbc.gridheight = 4;
    gbc.anchor = GridBagConstraints.NORTH;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    tablePanel.add(scrollPane1, gbc);
    mainTable = new JTable();
    mainTable.setPreferredScrollableViewportSize(new Dimension(450, 800));
    scrollPane1.setViewportView(mainTable);
    queryField = new JTextField();
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    tablePanel.add(queryField, gbc);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$ () { return tablePanel; }

}
