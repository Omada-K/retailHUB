package com.ui;

import com.dao.CustomersDAO;
import com.dao.OrdersDAO;
import com.dao.ProductsDAO;
import com.dao.UserDAO;
import com.model.Customer;
import com.model.Order;
import com.model.Product;
import com.model.User;
import com.service.DataGenerator;
import com.service.PythonRunner;
import com.ui.tablemodel.CustomerTableModel;
import com.ui.tablemodel.OrderTableModel;
import com.ui.tablemodel.ProductTableModel;
import com.ui.tablemodel.UserTableModel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.List;

public class MainFrame extends BaseFrame {
  //ui
  private JButton logoutButton;
  private JButton viewOrdersButton;
  private JButton viewUsersButton;
  private JButton viewCustomersButton;
  private JButton viewProductsButton;
  private JCheckBox prediction1CheckBox;
  private JCheckBox prediction2CheckBox;
  private JCheckBox prediction3CheckBox;
  private JButton generateButton;
  private JPanel mainFramePanel;
  private JButton salvageDataFromOldButton;
  private JButton aboutButton;
  private JButton generateSyntheticDataButton;
  private JLabel welcomeLabel;
  private JLabel adminRightsLabel;

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  public MainFrame (AppState state) {
    super();
    setContentPane(mainFramePanel);// don't forget this, the window will be empty
    setSize(800, 600);
    setDefaultCloseOperation(EXIT_ON_CLOSE);
    //set name of loggein user to the label
    Font currentFont = welcomeLabel.getFont();
    welcomeLabel.setFont(new Font(currentFont.getName(), currentFont.getStyle(), 24));
    welcomeLabel.setText("Welcome to RetailHub " + state.loggedInUserName);
    salvageDataFromOldButton.setEnabled(state.loggedInUserIsAdmin);
    generateSyntheticDataButton.setEnabled(state.loggedInUserIsAdmin);
    adminRightsLabel.setText(state.loggedInUserIsAdmin ? "You have Admin Rights" : "Users Rights");

    //View customers OnClick event listener
    viewCustomersButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        try {
          List<Customer> customers = CustomersDAO.getData();
          CustomerTableModel model = new CustomerTableModel(customers);
          state.selectedTableType = AppState.TableTypes.Customers.toString();
          new TableFrame<>(state, model);
        } catch (SQLException ex) {
          throw new RuntimeException(ex);
        }
      }
    });
    //view users OnClick event listener
    viewUsersButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        try {
          List<User> users = UserDAO.getData();
          UserTableModel model = new UserTableModel(users);
          state.selectedTableType = AppState.TableTypes.Users.toString();
          new TableFrame<>(state, model);
        } catch (SQLException ex) {
          throw new RuntimeException(ex);
        }
      }
    });
    //orders OnClick event listener
    viewOrdersButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        try {
          List<Order> orders = OrdersDAO.getDataToDisplay();
          OrderTableModel model = new OrderTableModel(orders);
          state.selectedTableType = AppState.TableTypes.Orders.toString();
          new TableFrame<>(state, model);
        } catch (SQLException ex) {
          throw new RuntimeException(ex);
        }
      }
    });
    //View Products here
    viewProductsButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        try {
          List<Product> products = ProductsDAO.getData();
          ProductTableModel model = new ProductTableModel(products);
          state.selectedTableType = AppState.TableTypes.Products.toString();
          new TableFrame<>(state, model);
        } catch (SQLException ex) {
          throw new RuntimeException(ex);
        }
      }
    });
    //logout OnClick event listener
    logoutButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        try {
          state.resetState();
          new LoginFrame(state);
        } catch (SQLException ex) {
          throw new RuntimeException(ex);
        }
        dispose();
      }
    });
    salvageDataFromOldButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {

        PythonRunner.runScript("get_api_data_script_main.py");
      }
    });
    //About frame
    aboutButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        new AboutFrame();
      }
    });
    //generate outputs(python)
    generateSyntheticDataButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed (ActionEvent e) {
        // Insert 50 randomly generated customers
        DataGenerator.createDummyCustomers();
        System.out.println("50 random customers inserted successfully!");
        DataGenerator.createDummyProducts();
        System.out.println("Random Products Created");
      }
    });
    //python runner
    generateButton.addActionListener(new ActionListener() {
      // Note: When multiple checkboxes are selected, the JavaMain frame becomes unresponsive.
      // Each checkbox triggers a data visualization window, and the main frame remains frozen
      // until all these windows are manually closed. This blocking behavior is likely due to
      // the use of a GUI method (e.g., plt.show()) in Python, which halts Java execution
      // until the plot window is closed. Consider switching to non-blocking visualization or
      // saving plots to files instead.

      @Override
      public void actionPerformed (ActionEvent e) {
        if (prediction1CheckBox.isSelected()) {
          System.out.println("Clicked prediction1CheckBox");
          PythonRunner.runScript("checkbox1.py");
          PythonRunner.showImageFrame("data/boston1.png");
        }
        if (prediction2CheckBox.isSelected()) {
          System.out.println("Clicked prediction2CheckBox");
          PythonRunner.runScript("checkbox2.py");
          PythonRunner.showImageFrame("data/boston2.png");
        }
        if (prediction3CheckBox.isSelected()) {
          System.out.println("Clicked prediction3CheckBox");
          PythonRunner.runScript("checkbox3.py");
          PythonRunner.showImageFrame("data/boston3.png");
        }

      }
    });
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$ () {
    mainFramePanel = new JPanel();
    mainFramePanel.setLayout(new GridBagLayout());
    welcomeLabel = new JLabel();
    welcomeLabel.setText("Welcom to RetailHub");
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    mainFramePanel.add(welcomeLabel, gbc);
    final JSeparator separator1 = new JSeparator();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.gridwidth = 3;
    gbc.fill = GridBagConstraints.BOTH;
    mainFramePanel.add(separator1, gbc);
    logoutButton = new JButton();
    logoutButton.setText("Log out");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    mainFramePanel.add(logoutButton, gbc);
    final JTabbedPane tabbedPane1 = new JTabbedPane();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.gridwidth = 3;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    mainFramePanel.add(tabbedPane1, gbc);
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridBagLayout());
    tabbedPane1.addTab("View Data", panel1);
    viewUsersButton = new JButton();
    viewUsersButton.setText("View Users");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel1.add(viewUsersButton, gbc);
    viewOrdersButton = new JButton();
    viewOrdersButton.setText("View Orders");
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel1.add(viewOrdersButton, gbc);
    viewCustomersButton = new JButton();
    viewCustomersButton.setText("View Customers");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel1.add(viewCustomersButton, gbc);
    viewProductsButton = new JButton();
    viewProductsButton.setText("View Products");
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel1.add(viewProductsButton, gbc);
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridBagLayout());
    tabbedPane1.addTab("Generate Output", panel2);
    prediction1CheckBox = new JCheckBox();
    prediction1CheckBox.setText("Prediction 1");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.gridwidth = 2;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    panel2.add(prediction1CheckBox, gbc);
    prediction2CheckBox = new JCheckBox();
    prediction2CheckBox.setText("Prediction 2");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.gridwidth = 2;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    panel2.add(prediction2CheckBox, gbc);
    prediction3CheckBox = new JCheckBox();
    prediction3CheckBox.setText("Prediction 3");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.gridwidth = 2;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    panel2.add(prediction3CheckBox, gbc);
    generateButton = new JButton();
    generateButton.setText("Generate");
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 4;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel2.add(generateButton, gbc);
    final JLabel label1 = new JLabel();
    label1.setText("Please select which prediction senario(s) you would like to visualize");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    panel2.add(label1, gbc);
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridBagLayout());
    tabbedPane1.addTab("Utilities", panel3);
    salvageDataFromOldButton = new JButton();
    salvageDataFromOldButton.setText("Salvage Data From old API");
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel3.add(salvageDataFromOldButton, gbc);
    generateSyntheticDataButton = new JButton();
    generateSyntheticDataButton.setText("Generate Synthetic Data");
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel3.add(generateSyntheticDataButton, gbc);
    aboutButton = new JButton();
    aboutButton.setText("About");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    mainFramePanel.add(aboutButton, gbc);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$ () { return mainFramePanel; }

}
